@use 'sass:map';
@use '@angular/material' as mat;

@mixin color($theme) {
    // Get the color config from the theme.
    $color-config: mat.get-color-config($theme);

    // Get the primary color palette from the color-config.
    $primary-palette: map.get($color-config, 'primary');
    $warn-palette: map.get($color-config, 'warn');
    $accent-palette: map.get($color-config, 'accent');
    $foreground: map.get($color-config, foreground);
    $background: map.get($color-config, background);

    .card {
        background: mat.get-color-from-palette($background, background);
    }

    .card-title, .card-metadata {
        color: mat.get-color-from-palette($foreground, text);
    }
    .card-subtitle, .metadata-key {
        color: mat.get-color-from-palette($foreground, secondary-text);
    }

    .color-box {
        background-color: mat.get-color-from-palette($accent-palette);
        border-color: mat.get-color-from-palette($accent-palette);
        color: mat.get-color-from-palette($accent-palette, default-contrast);
    }

    .description-box {
        a[rel="noreferrer noopener"] {
            color: mat.get-color-from-palette($primary-palette, 500);
        }

        a[rel="noreferrer noopener"]:hover {
            color: mat.get-color-from-palette($primary-palette);
        }

        div.bb_h1, .bb_wysiwyg h1 {
            color: mat.get-color-from-palette($primary-palette);
        }

        div.bb_h2, .bb_wysiwyg h2 {
            color: mat.get-color-from-palette($primary-palette);
        }

        blockquote.bb_blockquote, .bb_wysiwyg blockquote {
            border-color: mat.get-color-from-palette($accent-palette);
        }
    }

    $color1: mat.get-color-from-palette($background, selected-disabled-button);
    $color2: mat.get-color-from-palette($background, disabled-button-toggle);
    $color3: mat.get-color-from-palette($background, unselected-chip);

    .card.is-loading {
        .card-image,
        .card-title,
        .card-subtitle,
        .card-metadata {
            //background: #eee;
            //background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);

            background: linear-gradient(110deg, $color2 8%, $color3 18%, $color2 33%);
            background: $color1;
            animation: 1.5s shine linear infinite;
        }
    }

    @keyframes shine {
        to {
            background-position-x: -200%;
        }
    }

}

@mixin typography($theme) {
    // Get the typography config from the theme. So we can reuse its levels rules
    // A typography config is a collection of all typography levels, contains the styles for each level, keyed by name
    // A typography level is a collection of typographic styles rules (font family, font weight, font size, ...) that can be applied to a text
    $typography-config: mat.get-typography-config($theme);

    .card {
        font-family: mat.font-family($typography-config);  // reuse the font-family defined into the typography config
    }

    .description-box {
        font-family: mat.font-family($typography-config);
        b {
            font-weight: 500;
        }

        a[rel="noreferrer noopener"] {
            text-decoration: none;
            font-weight: bold;
        }

        blockquote.bb_blockquote, .bb_wysiwyg blockquote {
            font-size: 92%;
            word-break: break-word;
        }

        div.bb_h1, .bb_wysiwyg h1 {
            font-size: 20px;
            line-height: 23px;
            font-weight: normal;
        }

        div.bb_h2 {
            font-size: 18px;
            line-height: 21px;
            font-weight: 400;
        }
    }
}

@mixin theme($theme) {
    $color-config: mat.get-color-config($theme);
    @if $color-config != null {
        @include color($theme);
    }

    $typography-config: mat.get-typography-config($theme);
    @if $typography-config != null {
        @include typography($theme);
    }
}
