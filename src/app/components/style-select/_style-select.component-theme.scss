@use 'sass:map';
@use '@angular/material' as mat;

// TODO: These color configurations need to align with the theme defined in StyleManager and with the respective colors defined in its .scss file
$themes: (
    "pink-gray": (
        "primary": mat.define-palette(mat.$pink-palette, 700, 500, 900),
        "accent": mat.define-palette(mat.$blue-grey-palette, A200, A100, A400)
    ),
    "purple-teal": (
        "primary": mat.define-palette(mat.$purple-palette, 600, 400, 900),
        "accent":  mat.define-palette(mat.$teal-palette, A700, 700, A400)
    )
);

// TODO: The below typographies need to align with the typographies defined in StyleManager and with the respective configs defined in its .scss file
$typographies: (
    "roboto": mat.define-typography-config(
        $font-family:   'Roboto, "Helvetica Neue", sans-serif',
    ),
    "work-sans": mat.define-typography-config(
        $font-family: "'Work Sans', sans-serif"
    )
);

@mixin mat-option-theme($theme, $theme-config) {
    $primary: map.get($theme-config, "primary");
    $accent: map.get($theme-config, "accent");

    .theme-example-icon {
        &.#{$theme} {
            svg {
                .accent {
                    fill: mat.get-color-from-palette($accent);
                }
                .primary {
                    fill: mat.get-color-from-palette($primary);
                }
            }
        }
    }
}

@mixin mat-option-typography($typography, $config) {
    $font-family: mat.font-family($config);

    .style-select-option {
        span {
            font-family: $font-family;
        }
    }
}

@mixin color($theme) {
    // Get the color config from the theme.
    $color-config: mat.get-color-config($theme);

    // Get the primary color palette from the color-config.
    //$primary-palette: map.get($color-config, 'primary');
    //$warn-palette: map.get($color-config, 'warn');
    //$accent-palette: map.get($color-config, 'accent');
    //$foreground: map.get($color-config, foreground);
    //$background: map.get($color-config, background);
    // emit the rules for the mat-option of themes options, one for each theme defined in $themes
    @each $theme, $config in $themes {
        @include mat-option-theme($theme, $config);
    }
}

@mixin typography($theme) {
    // Get the typography config from the theme. So we can reuse its levels rules
    // A typography config is a collection of all typography levels, contains the styles for each level, keyed by name
    // A typography level is a collection of typographic styles rules (font family, font weight, font size, ...) that can be applied to a text
    //$typography-config: mat.get-typography-config($theme);

    @each $typography, $config in $typographies {
        @include mat-option-typography($typography, $config);
    }
}

@mixin theme($theme) {
    $color-config: mat.get-color-config($theme);
    @if $color-config != null {
        @include color($theme);
    }

    $typography-config: mat.get-typography-config($theme);
    @if $typography-config != null {
        @include typography($theme);
    }
}
